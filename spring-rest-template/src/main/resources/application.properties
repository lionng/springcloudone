server.port=8083
spring.application.name=ribbon-eureka-demo
eureka.client.serviceUrl.defaultZone=http://yinjihuan:123456@localhost:8761/eureka/
#采用IP注册
eureka.instance.prefer-ip-address=true
#定义实例ID格式
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
#健康检查
eureka.client.healthcheck.enabled=true
# 默认 30 秒
#eureka.instance.lease-renewal-interval-in-seconds=5
# 默认 90 秒
#eureka.instance.lease-expiration-duration-in-seconds=5
#开启 Ribbon 的饥饿加载模式
ribbon.eager-load.enabled=true
#指定需要饥饿加载的服务名，也就是你需要调用的服务，若有多个则用逗号隔开
ribbon.eager-load.clients=ribbon-eureka-demo
#使用自定义的负载策略
#ribbon-eureka-demo.ribbon.NFLoadBalancerRuleClassName=top.zhangxiaofeng.springresttemplate.config.MyRule
#禁用Eureka--当我们禁用了 Eureka 之后，就不能使用服务名称去调用接口了，必须指定服务地址
ribbon.eureka.enabled=false
#禁用 Eureka，禁用之后就需要手动配置调用的服务地址了，配置如下
ribbon-eureka-demo.ribbon.listOfServers=localhost:8083
#请求连接的超时时间
#ribbon-eureka-demo.ribbon.ConnectTimeout=2000
#请求处理的超时时间
#ribbon-eureka-demo.ribbon.ReadTimeout=5000
# 最大连接数
#ribbon.MaxTotalConnections=500
# 每个host最大连接数
#ribbon.MaxConnectionsPerHost=500
#除了使用代码进行 Ribbon 的配置，我们还可以通过配置文件的方式来为 Ribbon 指定对应的配置
#<clientName>.ribbon.NFLoadBalancerClassName: Should implement ILoadBalancer(负载均衡器操作接口)
#<clientName>.ribbon.NFLoadBalancerRuleClassName: Should implement IRule(负载均衡算法)
#<clientName>.ribbon.NFLoadBalancerPingClassName: Should implement IPing(服务可用性检查)
#<clientName>.ribbon.NIWSServerListClassName: Should implement ServerList(服务列表获取)
#<clientName>.ribbon.NIWSServerListFilterClassName: Should implement ServerList­Filter(服务列表的过滤)
##重试机制
#1. RetryRule 重试
#最简单的方法就是利用 Ribbon 自带的重试策略进行重试，此时只需要指定某个服务的负载策略为重试策略即可
#ribbon-eureka-demo.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RetryRule
#2. Spring Retry 重试
#除了使用 Ribbon 自带的重试策略，我们还可以通过集成 Spring Retry 来进行重试操作  http://c.biancheng.net/view/5356.html